# Exposes a URL that specifies the behaviour of this scalar.
directive @specifiedBy(
  # The URL that specifies the behaviour of this scalar.
  url: String!
) on SCALAR

type BandDjsDataType {
  pricing: Spp
  personInfo: PersonInfo
}

input BandDjsDetailsInput {
  pricing: SppInput
  personInfo: PersonInfoInput
}

type BeautyProfessionalDataType {
  pricing: Spp
  personInfo: PersonInfo
}

input BeautyProfessionalDetailsInput {
  pricing: SppInput
  personInfo: PersonInfoInput
}

type CakesDessertsDataType {
  pricing: Spp
  personInfo: PersonInfo
}

input CakesDessertsDetailsInput {
  pricing: SppInput
  personInfo: PersonInfoInput
}

type CatererDataType {
  pricing: Spp
  personInfo: PersonInfo
}

input CatererDetailsInput {
  pricing: SppInput
  personInfo: PersonInfoInput
}

type City {
  name: String!
  key: String!
}

type Clap {
  name: String!
  key: String!
  values: [String!]!
}

input ClapInput {
  name: String!
  key: String!
  values: [String!]!
}

type Connection {
  pageInfo: PageInfo!
  edges: [NodeEdge!]!
}

type ConnectionExtra {
  pageInfo: PageInfo!
  edges: [NodeEdge!]!
  vendor_type: VendorType
  district_key: String
  district_id: String
}

type ConnectionNode {
  business_name: String!
  id: String!
  gallery_photos: [Image!]!
  vendor_type: VendorType!
  district_display_name: String
}

type District {
  name: String!
  key: String!
  cities: [City!]!
}

input FixedInput {
  price: Float
}

type FixedObject {
  price: Float
}

type FloristsDataType {
  pricing: Spp
  personInfo: PersonInfo
}

input FloristsDetailsInput {
  pricing: SppInput
  personInfo: PersonInfoInput
}

type FrequentQuestion {
  question: String!
  answer: String!
}

# Edit common vendor details
input FrequentQuestionInput {
  question: String!
  answer: String!
}

input GalleryPhotoInput {
  token: String
  id: String
}

type Geo {
  latitude: Float!
  longitude: Float!
}

input GeoInput {
  latitude: Float!
  longitude: Float!
}

type Image {
  ht: Float!
  wd: Float!
  id: String!
}

enum ListingStatus {
  verified
  unverified
  suspended
  pending
  paymentPending
}

# Register new vendor data
input ListInput {
  districtID: String
  vendorType: VendorType
  searchQuery: String
}

type LocationNode {
  id: String!
  name: String!
  key: String!
  parent_id: String
}

type Mutation {
  vendorRegisterOtp(phone: String!): Boolean!
  vendorRegister(firstName: String!, lastName: String!, email: String, address: String, phone: String!, password: String!, authCode: String!): Boolean!
  vendorLoginOtp(phone: String!): Boolean
  vendorLogin(password: String!, phone: String!): Boolean
  vendorLogout: Boolean!
  confirmEmailVendor(token: String!): Boolean
  forgotPassword(email: String!): Boolean!
  changePassword(data: VendorPasswordChangeInput!): VendorProfile
  vendorEditDetails(data: VendorDetailsInput!): Boolean!
}

type NodeEdge {
  node: ConnectionNode!

  # Used in `before` and `after` args
  cursor: String!
}

input PackageInput {
  name: String
  short: String
  min_price: Float
  description: String
  price: [PriceInput!]
}

type PackageObject {
  name: String
  short: String
  min_price: Float
  description: String
  price: [PriceObject!]
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PersonInfo {
  person_photo: Image!
  name: String!
  position: String
}

input PersonInfoInput {
  personPhoto: PersonPhotoInput
  name: String!
  position: String
}

input PersonPhotoInput {
  token: String
}

type PhotographerDataType {
  pricing: Spp
  personInfo: PersonInfo
}

input PhotographerDetailsInput {
  pricing: SppInput
  personInfo: PersonInfoInput
}

input PriceInput {
  name: String
  price_type: PriceType!
  fixed: FixedInput
  range: RangeInput
  starting: StartingInput
  unit: String
}

type PriceObject {
  name: String
  price_type: PriceType!
  fixed: FixedObject
  range: RangeObject
  starting: StartingObject
  unit: String
}

enum PriceType {
  fixed
  range
  starting
}

type Query {
  isVendorPhoneExist(phone: String!): Boolean!
  vendorProfile: VendorProfile
  vendorSearch(
    # Paginate before opaque cursor
    before: String

    # Paginate after opaque cursor
    after: String

    # Paginate first
    first: Float

    # Paginate last
    last: Float
    where: ListInput
  ): Connection!
  vendorSearchWithExtra(
    # Paginate before opaque cursor
    before: String

    # Paginate after opaque cursor
    after: String

    # Paginate first
    first: Float

    # Paginate last
    last: Float
    where: ListInput
  ): ConnectionExtra!
  vendorDetails(vendorDataId: String!): VendorDetails
  vendorDetailsB(businessName: String!, vendorDataId: String): VendorDetails
  vendorDetailsExtra: VendorDetailsExtra
  provinces: [LocationNode!]!
  districts(province_id: String): [LocationNode!]!
  cities(districts_id: String): [LocationNode!]!
  clapStore(vendorType: VendorType!): [StoreClap!]!
}

input RangeInput {
  from_price: Float
  to_price: Float
}

type RangeObject {
  from_price: Float
  to_price: Float
}

type SocialMedia {
  facebook: String
  instagram: String
  pinterest: String
  website: String
}

type Spp {
  min_price: Float
  packages: [PackageObject!]
}

input SppInput {
  min_price: Float
  packages: [PackageInput!]
}

input StartingInput {
  price: Float
}

type StartingObject {
  price: Float
}

type StoreClap {
  name: String!
  key: String!
  values: [String!]!
}

type VendorDetails {
  phone: String
  address: String
  searchLocations: [District!]
  vendor_type: VendorType
  links: SocialMedia
  business_name: String
  frequent_questions: [FrequentQuestion!]
  vendorTypes: VendorTypes
  galleryPhoto: [Image!]
  geo: Geo
  description: String
  claps: [Clap!]
}

type VendorDetailsExtra {
  phone: String
  address: String
  searchLocations: [District!]
  vendor_type: VendorType
  links: SocialMedia
  business_name: String
  frequent_questions: [FrequentQuestion!]
  vendorTypes: VendorTypes
  galleryPhoto: [Image!]
  geo: Geo
  description: String
  claps: [Clap!]
  isComplete: Boolean
  listingStatus: ListingStatus
  isLive: Boolean
  reason: String
}

# Edit common vendor details
input VendorDetailsInput {
  address: String
  cityIDs: [String!]
  phone: String
  frequentQuestion: [FrequentQuestionInput!]
  vendorType: VendorType
  businessName: String
  facebook: String
  instagram: String
  pinterest: String
  website: String
  description: String
  geo: GeoInput
  gallery_photos: [GalleryPhotoInput!]
  venueDetails: VenueDetailsInput
  photographerDetails: PhotographerDetailsInput
  catererDetails: CatererDetailsInput
  bandDjsDetails: BandDjsDetailsInput
  beautyProfessionalDetails: BeautyProfessionalDetailsInput
  cakesDessertsDetails: CakesDessertsDetailsInput
  floristsDetails: FloristsDetailsInput
  videographerDetails: VideographerDetailsInput
  claps: [ClapInput!]
}

# vendor password change input
input VendorPasswordChangeInput {
  password: String!
  token: String!
}

type VendorProfile {
  id: ID!
  firstName: String!
  lastName: String!
  email: String
  phone: String!
  verified: Boolean!
}

enum VendorType {
  venue
  photographer
  caterer
  videographer
  florist
  bands_dj
  beauty_professional
  cakes_dessert
}

type VendorTypes {
  caterer_type: CatererDataType
  venue_type: VenueDataType
  photographer_type: PhotographerDataType
  band_djs_type: BandDjsDataType
  beauty_professionals_type: BeautyProfessionalDataType
  cakes_desserts_type: CakesDessertsDataType
  florists_type: FloristsDataType
  videographer_type: VideographerDataType
}

type VenueDataType {
  pricing: Spp
}

input VenueDetailsInput {
  pricing: SppInput
}

type VideographerDataType {
  pricing: Spp
  personInfo: PersonInfo
}

input VideographerDetailsInput {
  pricing: SppInput
  personInfo: PersonInfoInput
}
